next.js - frontend component
tailwindcss - styling modern web
shadcn/ui - button and form component
--shadcn form npx shadcn@latest add form
--shadcn input npx shadcn@latest add input
--shadcn toast npx shadcn@latest add toast
--shadcn avatar npx shadcn@latest add avatar | profile icon on the right
--shadcn textarea npx shadcn@latest add textarea\

Neon PostgreSQL - database server that can do autoscaling configuration at a free conts
- neon allows you to sub branch your database just like Git
- npm i drizzle-orm @neondatabase/serverless dotenv

Drizzle ORM - database ORM
- npm i drizzle-ORM
- npm i -D drizzle-kit

npx drizzle-kit generate
npx drizzle-kit migrate
npx drizzle-kit studio

drizzle.ts
-- drizzle is ideal for type-safety and standardization

AuthForm + zod resolver to resolve default value
"AuthForm.tsx" -> "use client" -> because many of it is managed at the client side

imagekit.io - for handling images and videos
-- npm install imagekitio-next
-- npm install imagekit


auth.js
- npm install next-auth@beta bcryptjs
- npm install --save-dev @types/bcryptjs
- npx auth secret - to create environment variables
-- adapters -- connect to backend database for user account and sessions
-- adapters is good for project complexity
-- upstash redis

upstash - caching, session management
upstash workflow - onboarding, inactivity

Upstash Redis
- npm install @upstash/redis
- npm install @upstash/ratelimit

Upstash -> ratelimit.ts

config files touched in the project:

tailwind.config.ts - styling css and its variables
types.d.ts - interface to be declare across components
next.config.ts - 

<BookOverview {...sampleBooks[0]}, ... here means spreading the properties in sampleBooks[0]

sampleBooks[0] -> where all conts books is stored currently

cn() -> This function, cn, takes a variable number of CSS class values as input, merges \
them using clsx and twMerge -> merging css class tgt

eslint.config.mjs - to structure the project into certain standards

interface Props <T> -> T is generic types, waiting for what to be parsed in

lib/validations.ts -> to declare form fields and its validations


Rate Limiting - Auth.js - too many requests

Workflow - to check whether user has logged in or not
- when is near to return the book, then have to create services to notify users
Q - stash
-- npx @upstash/qstash-cli dev
-- npm install @upstash/workflow

Q - Stash Workflow (The place to check for logs)

Resend - logs to check for errors and debugging

Resend with React components new email for developers to use
// did continue with resend as need to pay money for hostinger for hosting purpose

.toISOString().slice(0,10) in await db, is to ignore timestamp

Check at Vercel server logs to find for errors

Hostinger - Create email account for domain and to be used at workflow.ts - body/from


Resend DNS Records copy over to Hostinger Manage DNS Records

React-Colorful
--npm install react-colorful

lib/config.ts -> location to configure environment variables

className="invert" - to change between light and dark theme

max-md:hidden - to not show for desktop size

asChild -> children property definition for react.js
-> as a link to go back

after building new schema, run command npx drizzle-kit generate

interface Props extends Partial<Book> -> Partial to replace FieldValues, so validate a few fields only

resolvers are function that handles responses/handle query coming from db

components.json {cssVariables set to false to allow shadcn components not to be overrided}
