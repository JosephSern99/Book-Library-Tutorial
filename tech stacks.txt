next.js - frontend component
tailwindcss - styling modern web
shadcn/ui - button and form component
--shadcn form npx shadcn@latest add form
--shadcn input npx shadcn@latest add input
--shadcn toast npx shadcn@latest add toast
--shadcn avatar npx shadcn@latest add avatar


Neon PostgreSQL - database server that can do autoscaling configuration at a free conts
- neon allows you to sub branch your database just like Git
- npm i drizzle-orm @neondatabase/serverless dotenv

Drizzle ORM - database ORM
- npm i drizzle-ORM
- npm i -D drizzle-kit

npx drizzle-kit generate
npx drizzle-kit migrate
npx drizzle-kit studio

drizzle.ts
-- drizzle is ideal for type-safety and standardization

AuthForm + zod resolver to resolve default value
"AuthForm.tsx" -> "use client" -> because many of it is managed at the client side

imagekit.io - for handling images and videos
-- npm install imagekitio-next
-- npm install imagekit


auth.js
- npm install next-auth@beta bcryptjs
- npm install --save-dev @types/bcryptjs
- npx auth secret - to create environment variables
-- adapters -- connect to backend database for user account and sessions
-- adapters is good for project complexity
-- upstash redis

upstash - caching, session management
upstash workflow - onboarding, inactivity

Upstash Redis
- npm install @upstash/redis
- npm install @upstash/ratelimit

config files touched in the project:

tailwind.config.ts - styling css and its variables
types.d.ts - interface to be declare across components
next.config.ts - 

<BookOverview {...sampleBooks[0]}, ... here means spreading the properties in sampleBooks[0]

sampleBooks[0] -> where all conts books is stored currently

cn() -> This function, cn, takes a variable number of CSS class values as input, merges \
them using clsx and twMerge -> merging css class tgt

eslint.config.mjs - to structure the project into certain standards

interface Props <T> -> T is generic types, waiting for what to be parsed in

lib/validations.ts -> to declare form fields and its validations


Rate Limiting - Auth.js - too many requests

Workflow - to check whether user has logged in or not
- when is near to return the book, then have to create services to notify users
Q - stash
-- npx @upstash/qstash-cli dev
-- npm install @upstash/workflow
